#ifndef HARDWARE_H
#define HARDWARE_H

#include <QObject>
#include <ros/ros.h>
#include <stdio.h>
#include <iostream>
#include <stdlib.h>
#include <QTimer>
#include <QFile>
#include <QTextStream>
#include <QtSerialPort/QSerialPort>
#include <QtSerialPort/QSerialPortInfo>
#include "minho_team/hardwareInfo.h"
#include "minho_team/controlInfo.h"
using minho_team::hardwareInfo; //Namespace for hardware information msg - PUBLISHING
using minho_team::controlInfo; //Namespace for control information msg - SUBSCRIBING

using namespace std;

#define mainPath "catkin_ws/src/minho_team/hardware_node/config/main.cfg"
#define cfgFolderPath "catkin_ws/src/minho_team/hardware_node/config/"
    
class hardware : public QObject
{
    Q_OBJECT
public:
    explicit hardware(QObject *parent = 0);
    void initVariables();
private slots:
    void openSerialPort(QString name);
    void closeSerialPort();
    void handleError(QSerialPort::SerialPortError error);
    void initIMULinearization();
    void configFilePaths();
public slots:
    void writeSerial(QString data);
    void readSerialData();
	void setROSPublisher(ros::Publisher *pub);
	void writeSerialQueue();
	void addCommandToQueue(QString cmd);
	int getImuAngle(int angle);
private:
    //Main data
	QString mainFilePath, confFilePath;
    QSerialPort *serial;
    int porta;bool serialOpen;
    vector<QString> writeQueue;
    QTimer *writingTimer;
    //Linearization of IMU
	vector<int> trueVals,imuVals;
	vector<double> m,b;
	QString imuLinFilePath;
	ros::Publisher *ros_publisher;
	//Node configuration
	int nModules;
	vector<QString>mod_names;
	   
};

#endif // HARDWARE_H
